-- Drop tables in reverse order of creation to avoid foreign key constraints
SET FOREIGN_KEY_CHECKS = 0;
DROP TABLE IF EXISTS Payments;
DROP TABLE IF EXISTS ClubMembers_Teams;
DROP TABLE IF EXISTS Teams;
DROP TABLE IF EXISTS Memberships;
DROP TABLE IF EXISTS ClubMembers;
DROP TABLE IF EXISTS FamilyMembers;
DROP TABLE IF EXISTS Personnel_Assignments;
DROP TABLE IF EXISTS Personnel;
DROP TABLE IF EXISTS CommonInfo;
DROP TABLE IF EXISTS Locations;
DROP TABLE IF EXISTS Period;
DROP TABLE IF EXISTS SessionTypes;
DROP TABLE IF EXISTS PlayerRoles;
DROP TABLE IF EXISTS TeamFormations;
DROP TABLE IF EXISTS TeamFormationPlayers;
DROP TABLE IF EXISTS EmailLogs;
DROP TABLE IF EXISTS SecondaryFamilyMembers;
DROP TABLE IF EXISTS SecondaryFamilyMemberRelationships;
SET FOREIGN_KEY_CHECKS = 1;
use  new_test;
-- Create Period Table
CREATE TABLE Period (
  PeriodID INT AUTO_INCREMENT PRIMARY KEY,
  StartDate DATE NOT NULL,
  EndDate date
);

-- Create Locations Table
CREATE TABLE Locations (
  LocationID INT AUTO_INCREMENT PRIMARY KEY,
  Type ENUM('Head', 'Branch') NOT NULL,
  Name VARCHAR(100) NOT NULL,
  Address VARCHAR(255),
  City VARCHAR(100),
  Province VARCHAR(50),
  PostalCode VARCHAR(10),
  PhoneNumber VARCHAR(20),
  WebAddress VARCHAR(100),
  MaxCapacity INT
);

-- Create CommonInfo Table
CREATE TABLE CommonInfo (
  CommonID INT AUTO_INCREMENT PRIMARY KEY,
  FirstName VARCHAR(100),
  LastName VARCHAR(100),
  DateOfBirth DATE,
  SSN CHAR(9) UNIQUE NOT NULL,
  MedicareCardNumber VARCHAR(20) UNIQUE NOT NULL,
  PhoneNumber VARCHAR(20),
  Email VARCHAR(100),
  Address VARCHAR(255),
  City VARCHAR(100),
  Province VARCHAR(50),
  PostalCode VARCHAR(10)
);

-- Create Personnel Table
CREATE TABLE Personnel (
  PersonnelID INT AUTO_INCREMENT PRIMARY KEY,
  CommonID INT NOT NULL,
  Role ENUM('Administrator', 'Captain', 'Coach', 'Assistant Coach', 'Other') NOT NULL,
  Mandate ENUM('Volunteer', 'Salaried') NOT NULL,
  FOREIGN KEY (CommonID) REFERENCES CommonInfo(CommonID)
);
ALTER TABLE Personnel
MODIFY Role ENUM('Administrator', 'Captain', 'Coach', 'Assistant Coach', 'Other', 'General Manager', 'Deputy Manager', 'Treasurer', 'Secretary') NOT NULL;
ALTER TABLE Personnel
ADD COLUMN LocationID INT NOT NULL;





ALTER TABLE Personnel
ADD CONSTRAINT fk_location
FOREIGN KEY (LocationID) REFERENCES Locations(LocationID);
-- Create Personnel_Assignments Table
CREATE TABLE Personnel_Assignments (
  AssignmentID INT AUTO_INCREMENT PRIMARY KEY,
  PersonnelID INT NOT NULL,
  LocationID INT NOT NULL,
  PeriodID INT NOT NULL,
  FOREIGN KEY (PersonnelID) REFERENCES Personnel(PersonnelID),
  FOREIGN KEY (LocationID) REFERENCES Locations(LocationID),
  FOREIGN KEY (PeriodID) REFERENCES Period(PeriodID)
);
SET SQL_SAFE_UPDATES = 0;
UPDATE Personnel p
JOIN Personnel_Assignments pa ON p.PersonnelID = pa.PersonnelID
SET p.LocationID = pa.LocationID;

SET SQL_SAFE_UPDATES = 1;
-- Create FamilyMembers Table
CREATE TABLE FamilyMembers (
  FamilyMemberID INT AUTO_INCREMENT PRIMARY KEY,
  CommonID INT NOT NULL,
  LocationID INT,
  Relationship ENUM('Father', 'Mother', 'Grandfather', 'Grandmother', 'Tutor', 'Partner', 'Friend', 'Other'),
  FOREIGN KEY (LocationID) REFERENCES Locations(LocationID),
  FOREIGN KEY (CommonID) REFERENCES CommonInfo(CommonID)
);

-- Create ClubMembers Table
CREATE TABLE ClubMembers (
  MemberID INT AUTO_INCREMENT PRIMARY KEY,
  CommonID INT NOT NULL,
  FamilyMemberID INT NOT NULL,
  LocationID INT,
  Height DECIMAL(5, 2),
  Weight DECIMAL(5, 2),
  FOREIGN KEY (LocationID) REFERENCES Locations(LocationID),
  FOREIGN KEY (CommonID) REFERENCES CommonInfo(CommonID),
  FOREIGN KEY (FamilyMemberID) REFERENCES FamilyMembers(FamilyMemberID)
);

-- Table for Memberships
CREATE TABLE Memberships (
  MembershipID INT AUTO_INCREMENT PRIMARY KEY,
  MemberID INT NOT NULL,
  Year INT NOT NULL,
  Status ENUM('Active', 'Inactive') DEFAULT 'Active',
  TotalPaid DECIMAL(10, 2) DEFAULT 0,
  DonationAmount DECIMAL(10, 2) AS (GREATEST(TotalPaid - 100, 0)) STORED,
  FOREIGN KEY (MemberID) REFERENCES ClubMembers(MemberID)
);
-- Create Teams Table
CREATE TABLE Teams (
  TeamID INT AUTO_INCREMENT PRIMARY KEY,
  TeamName VARCHAR(100),
  TeamType ENUM('Boys', 'Girls'),
  LocationID INT NOT NULL,
  FOREIGN KEY (LocationID) REFERENCES Locations(LocationID)
);

-- Create ClubMembers_Teams Table
CREATE TABLE ClubMembers_Teams (
  TeamID INT,
  MemberID INT,
  LocationID INT,
  PRIMARY KEY (TeamID, MemberID),
  FOREIGN KEY (TeamID) REFERENCES Teams(TeamID),
  FOREIGN KEY (MemberID) REFERENCES ClubMembers(MemberID),
  FOREIGN KEY (LocationID) REFERENCES Locations(LocationID)
);
-- Table for Payments
CREATE TABLE Payments (
  PaymentID INT AUTO_INCREMENT PRIMARY KEY,
  MembershipID INT NOT NULL,
  PaymentDate DATE NOT NULL,
  Amount DECIMAL(10, 2) NOT NULL,
  PaymentMethod ENUM('Cash', 'Debit', 'Credit'),
  FOREIGN KEY (MembershipID) REFERENCES Memberships(MembershipID)
);

-- Create SessionTypes Table
CREATE TABLE SessionTypes (
  SessionTypeID INT AUTO_INCREMENT PRIMARY KEY,
  Type ENUM('Training', 'Game') NOT NULL
);

-- Create PlayerRoles Table
CREATE TABLE PlayerRoles (
  RoleID INT AUTO_INCREMENT PRIMARY KEY,
  RoleName ENUM('Outside Hitter', 'Opposite', 'Setter', 'Middle Blocker', 'Libero', 'Defensive Specialist', 'Serving Specialist') NOT NULL
);

-- Create TeamFormations Table
CREATE TABLE TeamFormations (
  FormationID INT AUTO_INCREMENT PRIMARY KEY,
  TeamID INT NOT NULL,
  SessionTypeID INT NOT NULL,
  SessionDate DATE NOT NULL,
  StartTime TIME NOT NULL,
  EndTime TIME NOT NULL,
  Address VARCHAR(255) NOT NULL,
  Score INT,
  FOREIGN KEY (TeamID) REFERENCES Teams(TeamID),
  FOREIGN KEY (SessionTypeID) REFERENCES SessionTypes(SessionTypeID)
);

-- Create TeamFormationPlayers Table
CREATE TABLE TeamFormationPlayers (
  FormationID INT NOT NULL,
  MemberID INT NOT NULL,
  RoleID INT NOT NULL,
  PRIMARY KEY (FormationID, MemberID),
  FOREIGN KEY (FormationID) REFERENCES TeamFormations(FormationID),
  FOREIGN KEY (MemberID) REFERENCES ClubMembers(MemberID),
  FOREIGN KEY (RoleID) REFERENCES PlayerRoles(RoleID)
);

-- Create EmailLogs Table
CREATE TABLE EmailLogs (
  EmailLogID INT AUTO_INCREMENT PRIMARY KEY,
  EmailDate DATETIME NOT NULL,
  Sender VARCHAR(100) NOT NULL,
  Recipient VARCHAR(100) NOT NULL,
  CCList VARCHAR(255),
  Subject VARCHAR(255) NOT NULL,
  BodyPreview VARCHAR(100) NOT NULL,
  EmailType ENUM('TeamFormation', 'Deactivation') NOT NULL
);

-- Create SecondaryFamilyMembers Table
CREATE TABLE SecondaryFamilyMembers (
  SecondaryID INT AUTO_INCREMENT PRIMARY KEY,
  PrimaryFamilyMemberID INT NOT NULL,
  CommonID INT NOT NULL,
  Relationship ENUM('Father', 'Mother', 'Grandfather', 'Grandmother', 'Uncle', 'Aunt', 'Tutor', 'Partner', 'Friend', 'Other') NOT NULL,
  FOREIGN KEY (PrimaryFamilyMemberID) REFERENCES FamilyMembers(FamilyMemberID),
  FOREIGN KEY (CommonID) REFERENCES CommonInfo(CommonID)
);

-- Create SecondaryFamilyMemberRelationships Table
CREATE TABLE SecondaryFamilyMemberRelationships (
  SecondaryID INT NOT NULL,
  MemberID INT NOT NULL,
  Relationship ENUM('Father', 'Mother', 'Grandfather', 'Grandmother', 'Uncle', 'Aunt', 'Tutor', 'Partner', 'Friend', 'Other') NOT NULL,
  PRIMARY KEY (SecondaryID, MemberID),
  FOREIGN KEY (SecondaryID) REFERENCES SecondaryFamilyMembers(SecondaryID),
  FOREIGN KEY (MemberID) REFERENCES ClubMembers(MemberID)
);

-- Add trigger for age validation
DELIMITER //
CREATE TRIGGER validate_member_age
BEFORE INSERT ON ClubMembers
FOR EACH ROW
BEGIN
    DECLARE member_age INT;
    SELECT TIMESTAMPDIFF(YEAR, (SELECT DateOfBirth FROM CommonInfo WHERE CommonID = NEW.CommonID), CURDATE()) INTO member_age;
    IF member_age < 11 OR member_age > 18 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Club member must be between 11 and 18 years old';
    END IF;
END //
DELIMITER ;

-- Add trigger for time conflict validation
DELIMITER //
CREATE TRIGGER validate_session_time_conflict
BEFORE INSERT ON TeamFormationPlayers
FOR EACH ROW
BEGIN
    DECLARE conflicting_sessions INT;
    SELECT COUNT(*)
    INTO conflicting_sessions
    FROM TeamFormationPlayers tfp
    JOIN TeamFormations tf ON tfp.FormationID = tf.FormationID
    WHERE tfp.MemberID = NEW.MemberID
    AND tf.SessionDate = (SELECT SessionDate FROM TeamFormations WHERE FormationID = NEW.FormationID)
    AND ABS(TIMESTAMPDIFF(HOUR, 
        CONCAT(tf.SessionDate, ' ', tf.StartTime),
        (SELECT CONCAT(SessionDate, ' ', StartTime) FROM TeamFormations WHERE FormationID = NEW.FormationID)
    )) < 3;
    
    IF conflicting_sessions > 0 THEN
        SIGNAL SQLSTATE '45000'
        SET MESSAGE_TEXT = 'Cannot assign player to sessions less than 3 hours apart on the same day';
    END IF;
END //
DELIMITER ;

-- Add trigger for membership deactivation
DELIMITER //
CREATE TRIGGER check_member_age_monthly
AFTER UPDATE ON ClubMembers
FOR EACH ROW
BEGIN
    DECLARE member_age INT;
    DECLARE member_email VARCHAR(100);
    DECLARE member_name VARCHAR(200);
    
    IF NEW.LocationID IS NULL AND OLD.LocationID IS NOT NULL THEN
        SELECT TIMESTAMPDIFF(YEAR, (SELECT DateOfBirth FROM CommonInfo WHERE CommonID = NEW.CommonID), CURDATE()) INTO member_age;
        SELECT Email INTO member_email FROM CommonInfo WHERE CommonID = NEW.CommonID;
        SELECT CONCAT(FirstName, ' ', LastName) INTO member_name FROM CommonInfo WHERE CommonID = NEW.CommonID;
        
        IF member_age >= 18 THEN
            -- Insert into email logs
            INSERT INTO EmailLogs (EmailDate, Sender, Recipient, Subject, BodyPreview, EmailType)
            VALUES (NOW(), 'system@myvc.com', member_email, 'Membership Deactivation Notice',
                   CONCAT('Dear ', member_name, ', your membership has been deactivated due to age.'),
                   'Deactivation');
        END IF;
    END IF;
END //
DELIMITER ;
